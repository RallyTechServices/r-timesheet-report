<!DOCTYPE html>
<html>
<head>
    <title>Technical Services Top Level Time Report</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Fri Feb 19 2016 10:01:23 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Feb 19 2016 10:01:23 GMT-0800 (PST)";
        var CHECKSUM = 101932945324;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/* Blob.js
 * A Blob implementation.
 * 2014-05-31
 * 
 * By Eli Grey, http://eligrey.com
 * By Devin Samarin, https://github.com/eboyjr
 * License: X11/MIT
 *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md
 */

/*global self, unescape */
/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,
  plusplus: true */

/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */

(function (view) {
    "use strict";

    view.URL = view.URL || view.webkitURL;

    if (view.Blob && view.URL) {
        try {
            new Blob;
            return;
        } catch (e) {}
    }

    // Internally we use a BlobBuilder implementation to base Blob off of
    // in order to support older browsers that only have BlobBuilder
    var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || (function(view) {
        var
              get_class = function(object) {
                return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1];
            }
            , FakeBlobBuilder = function BlobBuilder() {
                this.data = [];
            }
            , FakeBlob = function Blob(data, type, encoding) {
                this.data = data;
                this.size = data.length;
                this.type = type;
                this.encoding = encoding;
            }
            , FBB_proto = FakeBlobBuilder.prototype
            , FB_proto = FakeBlob.prototype
            , FileReaderSync = view.FileReaderSync
            , FileException = function(type) {
                this.code = this[this.name = type];
            }
            , file_ex_codes = (
                  "NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR "
                + "NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR"
            ).split(" ")
            , file_ex_code = file_ex_codes.length
            , real_URL = view.URL || view.webkitURL || view
            , real_create_object_URL = real_URL.createObjectURL
            , real_revoke_object_URL = real_URL.revokeObjectURL
            , URL = real_URL
            , btoa = view.btoa
            , atob = view.atob
            
            , ArrayBuffer = view.ArrayBuffer
            , Uint8Array = view.Uint8Array
        ;
        FakeBlob.fake = FB_proto.fake = true;
        while (file_ex_code--) {
            FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;
        }
        if (!real_URL.createObjectURL) {
            URL = view.URL = {};
        }
        URL.createObjectURL = function(blob) {
            var
                  type = blob.type
                , data_URI_header
            ;
            if (type === null) {
                type = "application/octet-stream";
            }
            if (blob instanceof FakeBlob) {
                data_URI_header = "data:" + type;
                if (blob.encoding === "base64") {
                    return data_URI_header + ";base64," + blob.data;
                } else if (blob.encoding === "URI") {
                    return data_URI_header + "," + decodeURIComponent(blob.data);
                } if (btoa) {
                    return data_URI_header + ";base64," + btoa(blob.data);
                } else {
                    return data_URI_header + "," + encodeURIComponent(blob.data);
                }
            } else if (real_create_object_URL) {
                return real_create_object_URL.call(real_URL, blob);
            }
        };
        URL.revokeObjectURL = function(object_URL) {
            if (object_URL.substring(0, 5) !== "data:" && real_revoke_object_URL) {
                real_revoke_object_URL.call(real_URL, object_URL);
            }
        };
        FBB_proto.append = function(data/*, endings*/) {
            var bb = this.data;
            // decode data to a binary string
            if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {
                var
                      str = ""
                    , buf = new Uint8Array(data)
                    , i = 0
                    , buf_len = buf.length
                ;
                for (; i < buf_len; i++) {
                    str += String.fromCharCode(buf[i]);
                }
                bb.push(str);
            } else if (get_class(data) === "Blob" || get_class(data) === "File") {
                if (FileReaderSync) {
                    var fr = new FileReaderSync;
                    bb.push(fr.readAsBinaryString(data));
                } else {
                    // async FileReader won't work as BlobBuilder is sync
                    throw new FileException("NOT_READABLE_ERR");
                }
            } else if (data instanceof FakeBlob) {
                if (data.encoding === "base64" && atob) {
                    bb.push(atob(data.data));
                } else if (data.encoding === "URI") {
                    bb.push(decodeURIComponent(data.data));
                } else if (data.encoding === "raw") {
                    bb.push(data.data);
                }
            } else {
                if (typeof data !== "string") {
                    data += ""; // convert unsupported types to strings
                }
                // decode UTF-16 to binary string
                bb.push(unescape(encodeURIComponent(data)));
            }
        };
        FBB_proto.getBlob = function(type) {
            if (!arguments.length) {
                type = null;
            }
            return new FakeBlob(this.data.join(""), type, "raw");
        };
        FBB_proto.toString = function() {
            return "[object BlobBuilder]";
        };
        FB_proto.slice = function(start, end, type) {
            var args = arguments.length;
            if (args < 3) {
                type = null;
            }
            return new FakeBlob(
                  this.data.slice(start, args > 1 ? end : this.data.length)
                , type
                , this.encoding
            );
        };
        FB_proto.toString = function() {
            return "[object Blob]";
        };
        FB_proto.close = function() {
            this.size = 0;
            delete this.data;
        };
        return FakeBlobBuilder;
    }(view));

    view.Blob = function Blob(blobParts, options) {
        var type = options ? (options.type || "") : "";
        var builder = new BlobBuilder();
        if (blobParts) {
            for (var i = 0, len = blobParts.length; i < len; i++) {
                builder.append(blobParts[i]);
            }
        }
        return builder.getBlob(type);
    };
}(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content || this));
/* FileSaver.js
 *  A saveAs() FileSaver implementation.
 *  2014-05-27
 *
 *  By Eli Grey, http://eligrey.com
 *  License: X11/MIT
 *    See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  // IE 10+ (native saveAs)
  || (typeof navigator !== "undefined" &&
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  // Everyone else
  || (function(view) {
    "use strict";
    // IE <10 is explicitly unsupported
    if (typeof navigator !== "undefined" &&
        /MSIE [1-9]\./.test(navigator.userAgent)) {
        return;
    }
    var
          doc = view.document
          // only get URL when necessary in case Blob.js hasn't overridden it yet
        , get_URL = function() {
            return view.URL || view.webkitURL || view;
        }
        , save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
        , can_use_save_link = !view.externalHost && "download" in save_link
        , click = function(node) {
            var event = doc.createEvent("MouseEvents");
            event.initMouseEvent(
                "click", true, false, view, 0, 0, 0, 0, 0
                , false, false, false, false, 0, null
            );
            node.dispatchEvent(event);
        }
        , webkit_req_fs = view.webkitRequestFileSystem
        , req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
        , throw_outside = function(ex) {
            (view.setImmediate || view.setTimeout)(function() {
                throw ex;
            }, 0);
        }
        , force_saveable_type = "application/octet-stream"
        , fs_min_size = 0
        , deletion_queue = []
        , process_deletion_queue = function() {
            var i = deletion_queue.length;
            while (i--) {
                var file = deletion_queue[i];
                if (typeof file === "string") { // file is an object URL
                    get_URL().revokeObjectURL(file);
                } else { // file is a File
                    file.remove();
                }
            }
            deletion_queue.length = 0; // clear queue
        }
        , dispatch = function(filesaver, event_types, event) {
            event_types = [].concat(event_types);
            var i = event_types.length;
            while (i--) {
                var listener = filesaver["on" + event_types[i]];
                if (typeof listener === "function") {
                    try {
                        listener.call(filesaver, event || filesaver);
                    } catch (ex) {
                        throw_outside(ex);
                    }
                }
            }
        }
        , FileSaver = function(blob, name) {
            // First try a.download, then web filesystem, then object URLs
            var
                  filesaver = this
                , type = blob.type
                , blob_changed = false
                , object_url
                , target_view
                , get_object_url = function() {
                    var object_url = get_URL().createObjectURL(blob);
                    deletion_queue.push(object_url);
                    return object_url;
                }
                , dispatch_all = function() {
                    dispatch(filesaver, "writestart progress write writeend".split(" "));
                }
                // on any filesys errors revert to saving with object URLs
                , fs_error = function() {
                    // don't create more object URLs than needed
                    if (blob_changed || !object_url) {
                        object_url = get_object_url(blob);
                    }
                    if (target_view) {
                        target_view.location.href = object_url;
                    } else {
                        window.open(object_url, "_blank");
                    }
                    filesaver.readyState = filesaver.DONE;
                    dispatch_all();
                }
                , abortable = function(func) {
                    return function() {
                        if (filesaver.readyState !== filesaver.DONE) {
                            return func.apply(this, arguments);
                        }
                    };
                }
                , create_if_not_found = {create: true, exclusive: false}
                , slice
            ;
            filesaver.readyState = filesaver.INIT;
            if (!name) {
                name = "download";
            }
            if (can_use_save_link) {
                object_url = get_object_url(blob);
                save_link.href = object_url;
                save_link.download = name;
                click(save_link);
                filesaver.readyState = filesaver.DONE;
                dispatch_all();
                return;
            }
            // Object and web filesystem URLs have a problem saving in Google Chrome when
            // viewed in a tab, so I force save with application/octet-stream
            // http://code.google.com/p/chromium/issues/detail?id=91158
            if (view.chrome && type && type !== force_saveable_type) {
                slice = blob.slice || blob.webkitSlice;
                blob = slice.call(blob, 0, blob.size, force_saveable_type);
                blob_changed = true;
            }
            // Since I can't be sure that the guessed media type will trigger a download
            // in WebKit, I append .download to the filename.
            // https://bugs.webkit.org/show_bug.cgi?id=65440
            if (webkit_req_fs && name !== "download") {
                name += ".download";
            }
            if (type === force_saveable_type || webkit_req_fs) {
                target_view = view;
            }
            if (!req_fs) {
                fs_error();
                return;
            }
            fs_min_size += blob.size;
            req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                    var save = function() {
                        dir.getFile(name, create_if_not_found, abortable(function(file) {
                            file.createWriter(abortable(function(writer) {
                                writer.onwriteend = function(event) {
                                    target_view.location.href = file.toURL();
                                    deletion_queue.push(file);
                                    filesaver.readyState = filesaver.DONE;
                                    dispatch(filesaver, "writeend", event);
                                };
                                writer.onerror = function() {
                                    var error = writer.error;
                                    if (error.code !== error.ABORT_ERR) {
                                        fs_error();
                                    }
                                };
                                "writestart progress write abort".split(" ").forEach(function(event) {
                                    writer["on" + event] = filesaver["on" + event];
                                });
                                writer.write(blob);
                                filesaver.abort = function() {
                                    writer.abort();
                                    filesaver.readyState = filesaver.DONE;
                                };
                                filesaver.readyState = filesaver.WRITING;
                            }), fs_error);
                        }), fs_error);
                    };
                    dir.getFile(name, {create: false}, abortable(function(file) {
                        // delete file if it already exists
                        file.remove();
                        save();
                    }), abortable(function(ex) {
                        if (ex.code === ex.NOT_FOUND_ERR) {
                            save();
                        } else {
                            fs_error();
                        }
                    }));
                }), fs_error);
            }), fs_error);
        }
        , FS_proto = FileSaver.prototype
        , saveAs = function(blob, name) {
            return new FileSaver(blob, name);
        }
    ;
    FS_proto.abort = function() {
        var filesaver = this;
        filesaver.readyState = filesaver.DONE;
        dispatch(filesaver, "abort");
    };
    FS_proto.readyState = FS_proto.INIT = 0;
    FS_proto.WRITING = 1;
    FS_proto.DONE = 2;

    FS_proto.error =
    FS_proto.onwritestart =
    FS_proto.onprogress =
    FS_proto.onwrite =
    FS_proto.onabort =
    FS_proto.onerror =
    FS_proto.onwriteend =
        null;

    view.addEventListener("unload", process_deletion_queue, false);
    saveAs.unload = function() {
        process_deletion_queue();
        view.removeEventListener("unload", process_deletion_queue, false);
    };
    return saveAs;
}(
       typeof self !== "undefined" && self
    || typeof window !== "undefined" && window
    || this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module !== null) {
  module.exports = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {
  define([], function() {
    return saveAs;
  });
}
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    saveCSVToFile:function(csv,file_name,type_object){
            if (type_object == undefined){
                type_object = {type:'text/csv;charset=utf-8'};
            }
            var blob = new Blob([csv],type_object);
            saveAs(blob,file_name);
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var store = grid.getStore();
        
        var csv = [];

        if ( !skip_headers ) {
            csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        }
        var number_of_records = store.getTotalCount();
        this.logger.log("Store:", store);
        this.logger.log("Number of records to export:", number_of_records);
        
        for (var i = 0; i < number_of_records; i++) {
            var record = store.getAt(i);
            if ( ! record ) {
                return;
            }
            csv.push( this._getCSVFromRecord(record, grid, store) );
        }
        
        this.logger.log("Number or lines in CSV:", csv.length);
        return csv.join('\r\n');
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype != 'rallyrowactioncolumn'  && column.xtype != 'tsrowactioncolumn') {
                if (column.dataIndex) {
                    var column_name = column.dataIndex;
                    
                    var display_value = record.get(column_name);

                    if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                        if (column.exportRenderer) {
                            display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                        } else {
                            display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                        }
                    }
                    node_values.push(display_value);
                } else {
                    var display_value = null;
                    if (!column._csvIgnoreRender && column.renderer) {
                        if (column.exportRenderer) {
                            display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                        } else {
                            display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                        }
                        node_values.push(display_value);
                    }
                }

            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
/**
 * A dialog that displays artifacts to choose from
 *
 */
Ext.define('Rally.technicalservices.ChooserDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias:'widget.tschooserdialog',

    clientMetrics: [{
        beginEvent:'beforeshow',
        endEvent:'show',
        description:'dialog shown'
    }],

    width: 800,
    closable: true,

    searchContext: 'project',
    
    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose an Artifact',
        /**
         * @cfg {Array} (required)
         * List of artifact types to allow the user to choose from
         */
        artifactTypes: [],
        /**
         * @cfg {Boolean}
         * Allow multiple selection or not
         */
        multiple: false,

        /**
         * @cfg {Object}
         * An {Ext.data.Store} config object used when building the grid
         * Handy when you need to limit the selection with store filters
         */
        storeConfig: { },

        /**
         * @cfg {Object}
         * The list of filter configs that will appear in the filter combobox
         * Each list element should include a displayName and an attributeName property,
         * where the attributeName is the name of wsapi queryable attribute:
         *     {
         *         displayName: 'Formatted ID',
         *         attributeName: 'FormattedID'
         *     }
         */
        filterableFields: [],

        /**
         * @cfg {Ext.grid.Column}
         * List of columns that will be used in the chooser
         */
        columns : [],

        /**
         * @cfg [{String}]
         * List of field names to fetch when getting the objects
         */
        fetchFields: [],
        
        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Done',

        /**
         * @cfg {Object}
         * The grid configuration to be used when creative the grid of items in the dialog
         */
        gridConfig: {},

        /**
         * @cfg {String}
         * The ref of a record to select when the chooser loads
         */
        selectedRef: undefined

        /**
         * @private
         * @cfg userAction {String} (Optional)
         * The client metrics action to record when the user makes a selection and clicks done
         */
    },

    items: {
        xtype: 'panel',
        border: false,
        items: [
            {
                xtype: 'container',
                itemId: 'gridContainer',
                layout: 'fit',
                height: 400
            }
        ]
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event artifactChosen
             * Fires when user clicks done after choosing an artifact
             * @param {Rally.technicalservices.ChooserDialog} this dialog
             * @param {Rally.domain.WsapiModel} selected record or an array of selected records if multiple is true
             */
            'artifactChosen'
        );

        this.addCls('chooserDialog');

        this._buildButtons();
        this._buildSearchBar();

        Rally.data.ModelFactory.getModels({
            types: this.artifactTypes,
            success: function(models) {

                if (this.artifactTypes.length > 1) {
                    this._setupComboBox(models);
                }

                this._buildGrid(models[this.artifactTypes[0]]);

            },
            scope: this
        });

    },

    /**
     * @private
     */
    _buildButtons: function() {

        this.down('panel').addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: this.selectionButtonText,
                    cls: 'primary small',
                    scope: this,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        var selectedRecords = this._getSelectedRecords();
                        if (!this.multiple) {
                            selectedRecords = selectedRecords[0];
                        }
                        this.fireEvent('artifactChosen', this, selectedRecords);
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

    },

    /**
     * @private
     */
    _buildSearchBar: function() {

        var filterTypeComboBox = Ext.create('Ext.form.field.ComboBox', {
            itemId: 'filterTypeComboBox',
            queryMode: 'local',
            store: Ext.create('Ext.data.Store', {
                fields: ['attributeName', 'displayName'],
                data: this.filterableFields
            }),
            displayField: 'displayName',
            valueField: 'attributeName',
            editable: false
        });

        filterTypeComboBox.select(filterTypeComboBox.getStore().getAt(1));

        this.addDocked({
            xtype: 'toolbar',
            itemId: 'searchBar',
            dock: 'top',
            items: [
                filterTypeComboBox,
                {
                    xtype: 'textfield',
                    itemId: 'searchTerms',
                    emptyText: 'enter search terms',
                    flex: 1,
                    enableKeyEvents: true,
                    listeners: {
                        keyup: function(textField, event) {
                            if (event.getKey() === Ext.EventObject.ENTER) {
                                this._search();
                            }
                        },
                        scope: this
                    }
                },
                {
                    xtype: 'button',
                    text: '<span class="icon-search"> </span>',
                    handler: this._openSearchMenu,
                    scope: this
                }
            ]
        });
    },
    
    /**
     * @private
     * @param {Object} models Object with {Rally.domain.WsapiModel} items
     *
     */
    _setupComboBox: function(models) {
        var searchBar = this.down('#searchBar');
        var combo = Ext.create('Ext.form.field.ComboBox', {
            xtype: 'combo',
            name: 'filterType',
            width: 150,
            queryMode: 'local',
            store: Ext.create('Ext.data.Store', {
                fields: ['typeName', 'displayName', 'wsapiModel']
            }),
            displayField: 'displayName',
            valueField: 'typeName',
            editable: false
        });
        searchBar.insert(0, combo);

        Ext.Object.each(models, function(key, model) {
            combo.getStore().add({
                typeName: model.typePath,
                displayName: model.displayName,
                wsapiModel: model
            });
        }, this);

        combo.select(combo.getStore().getAt(0));

        combo.on('select', function(comboBox, options) {
            var option = options[0];
            this.grid.reconfigureWithModel(option.get('wsapiModel'));
        }, this);

    },

    /**
     * @private
     * @param {Rally.domain.WsapiModel}
     *
     */
    _buildGrid: function(model) {

        var mode = this.multiple ? 'MULTI' : 'SINGLE';
        this.selectionModel = Ext.create('Rally.ui.selection.CheckboxModel', {
            mode: mode,
            allowDeselect: true
        });

        var store_config = this.storeConfig;
        store_config.context = { project: Rally.getApp().getContext().getProjectRef()};
        
        var new_fetch = Ext.Array.merge(['ObjectID'],this.fetchFields);
        var current_fetch = store_config.fetch || [];
        
        store_config.fetch = Ext.Array.merge(new_fetch,current_fetch);
        
        var gridConfig = Ext.Object.merge({
            model: model,
            selModel: this.selectionModel,
            autoAddAllModelFieldsAsColumns: false,
            enableEditing: false,
            enableColumnHide: false,
            enableColumnMove: false,
            columnCfgs: this.columns,
            storeConfig: store_config,
            showRowActionsColumn: false,
            viewConfig: {
                emptyText: Rally.ui.EmptyTextFactory.get('defaultText')
            }
        }, this.config.gridConfig);

        this.grid = Ext.create('Rally.ui.grid.Grid', gridConfig);
        this.mon(this.grid, 'load', this._onGridLoad, this);
        this.down('#gridContainer').add(this.grid);
        this._onGridReady();
    },

    _onGridReady: function() {
        if (!this.grid.rendered) {
            this.mon(this.grid, 'afterrender', this._onGridReady, this, {single: true});
            return;
        }

        if (this.grid.getStore().isLoading()) {
            this.mon(this.grid, 'load', this._onGridReady, this, {single: true});
            return;
        }

        this._onGridLoad();
        this.center();

        if (Rally.BrowserTest) {
            Rally.BrowserTest.publishComponentReady(this);
        }
    },

    _onGridLoad: function() {
        if(this.getSelectedRef()){
            var recordIndex = this.grid.getStore().find('_ref', this.getSelectedRef());
            if(recordIndex !== -1){
                var record = this.grid.getStore().getAt(recordIndex);
                this.grid.getSelectionModel().select(record);
            }
        }
    },

    /**
     * @private
     * @return {Rally.data.Model}
     */
    _getSelectedRecords: function() {
        return this.selectionModel.getSelection();
    },

    /**
     * @private
     */
    _search: function() {
        
        var terms = this.down('#searchTerms').getValue();
        var filterBy = this.down('#filterTypeComboBox').getValue();
        var filter;
        
        var store_config = this.grid.storeConfig;
        
        store_config.context = { project: Rally.getApp().getContext().getProjectRef() };
        
        if ( this.searchContext == "workspace" ) {
            store_config.context = { project: null };
        }
        
        var store = this.grid.getStore();        
        store.context = store_config.context;
        
        if (!Ext.isEmpty(terms)) {
            filter = Ext.create('Rally.data.wsapi.Filter', {
                property: filterBy,
                value: terms,
                operator: 'Contains'
            });
        }

        this.grid.filter(filter, true);
    },

    _openSearchMenu: function(button) {
        var menu = Ext.widget({
            xtype: 'rallymenu',
            items: [
                { 
                    text: 'Search Selected Project',
                    handler: function() {
                        this.searchContext = 'project';
                        this._search();
                    },
                    scope: this
                },
                { 
                    text: 'Search Everywhere',
                    handler: function() {
                        this.searchContext = 'workspace';
                        this._search();
                    },
                    scope: this
                }
            ]
        });
        menu.showBy(button.getEl());
        if(button.toolTip) {
            button.toolTip.hide();
        }
    }
});

/**
 * Allows configuration of wip and schedule state mapping for kanban columns
 *
 *      @example
 *      Ext.create('Ext.Container', {
 *          items: [{
 *              xtype: 'kanbancolumnsettingsfield',
 *              value: {}
 *          }],
 *          renderTo: Ext.getBody().dom
 *      });
 *
 */
Ext.define('Rally.technicalservices.ColumnSettingsField', {
    extend: 'Ext.form.field.Base',
    alias: 'widget.tscolumnsettingsfield',

    requires: [
        'Rally.ui.combobox.ComboBox',
        'Rally.ui.TextField',
        'Rally.ui.combobox.FieldValueComboBox'
    ],

    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',

    width: 400,
    cls: 'column-settings',

    config: {
        /**
         * @cfg {Object}
         *
         * The column settings value for this field
         */
        value: undefined,
        /**
         * 
         * @cfg [{Object}] rallygrid column definition ({dataIndex:....}) 
         */
        gridColumns: []
    },

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },

    onRender: function() {
        this.callParent(arguments);

        var data = Ext.Array.map(this.gridColumns, this._recordToGridRow, this);
            
        this._store = Ext.create('Ext.data.Store', {
            fields: ['column', 'show'],
            data: data
        });
                
        this._grid = Ext.create('Rally.ui.grid.Grid', {
            autoWidth: true,
            renderTo: this.inputEl,
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            enableRanking: false,
            store: this._store,
            editingConfig: {
                publishMessages: false
            }
        });
    },

    _getColumnCfgs: function() {
        var columns = [
            {
                text: 'Column',
                dataIndex: 'column',
                emptyCellText: 'None',
                flex: 2
            },
            {
                text: 'Show',
                dataIndex: 'show',
                flex: 1,
                renderer: function (value) {
                    return value === true ? 'Yes' : 'No';
                },
                editor: {
                    xtype: 'rallycombobox',
                    displayField: 'name',
                    valueField: 'value',
                    editable: false,
                    storeType: 'Ext.data.Store',
                    storeConfig: {
                        remoteFilter: false,
                        fields: ['name', 'value'],
                        data: [
                            {'name': 'Yes', 'value': true},
                            {'name': 'No', 'value': false}
                        ]
                    }
                }
            }
        ];
        return columns;
    },

    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._buildSettingValue());
        return data;
    },

    _buildSettingValue: function() {
        console.log('--', this.gridColumns);
        var columns = {};
        this._store.each(function(record) {
            if (record.get('show')) {
                columns[record.get('column')] = {
                    show: record.get('show')
                };
            }
        }, this);
        return columns;
    },

    getErrors: function() {
        var errors = [];
        if (this._storeLoaded && !Ext.Object.getSize(this._buildSettingValue())) {
            errors.push('At least one column must be shown.');
        }
        return errors;
    },

    setValue: function(value) {
        this.callParent(arguments);
        
        this._value = value;
    },

    _getColumnValue: function(columnName) {
        var value = this._value;
        if ( Ext.isString(value) ) {
            value = Ext.JSON.decode(value);
        }
        
        if ( Ext.isEmpty(value) || Ext.isEmpty(value[columnName])) {
            return null;
        }
        
        return value[columnName];
    },

    _recordToGridRow: function(grid_column) {
        var column_name = grid_column['text'];
        var show = this._getColumnValue(column_name) && this._getColumnValue(column_name)['show'];
        
        var column = {
            column: column_name,
            show: show
        };

        return column;
    }
});

Ext.define('TSTimesheetFinanceRow',{
    extend: 'Ext.data.Model',
    
    fields: [
        { name: '_User', type:'object' },
        { name: '_WeekStartString', type:'string' },
        { name: 'DateVal', type: 'date' },
        { name: 'Hours', type: 'float' },
        { name: 'TimeEntryItem', type:'object'},
        { name: '_TopLevelParent', type:'object'},
        { name: '_CostCenter', type:'string' },
        { name: '_Vendor', type:'string' }, 
        { name: '_WorkProduct', type: 'object' },
        { name: '_Feature', type: 'object' },
        { name: '_TypeHierarchy', type: 'object' }
    ]
});

Ext.define("TSTopLevelTimeReport", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    
    layout: 'border', 
    items: [
        {xtype:'container', itemId:'selector_box', region: 'north',  layout: { type:'hbox' }},
        {xtype:'container', itemId:'display_box' , region: 'center', layout: { type: 'fit'} }
    ],
    
    config: {
        _selectedPIData: null,
        defaultSettings: {
            vendorField: 'MiddleName',
            columns: Ext.JSON.encode({
                'User': {show: true},
                'Cost Center': {show: true},
                'Vendor': {show: true},
                'Week Start': {show: true},
                'Date': {show: true},
                'Hours': {show: true}
            })
        }
    },
    
    stateful: true,
    stateEvents: ['updateData'],
    stateId: 'Rally.technicalservices.tstopleveltimereport.SelectedPIData',

    integrationHeaders : {
        name : "TSTopLevelTimeReport"
    },
    
    getState: function() {
        var me = this,
            state = null;

        state = {
            _selectedPIData: this._selectedPIData
        };

        return state;
    },
    
    launch: function() {
        this._getPortfolioItemTypes().then({
            scope: this,
            success: function(types) {
                this.PortfolioItemNames = Ext.Array.map(types, function(type){
                    return type.get('TypePath');
                });
                
                this._addSelectors(this.down('#selector_box'));
                this.down('#pi_message').update(this._selectedPIData);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem starting up', msg);
            }
        });
    },
    
    _addSelectors: function(container) {
        container.removeAll();
                
        var date_container = container.add({
            xtype:'container',
            layout: 'vbox'
        });
        
        var default_week = this._getBeginningOfWeek(new Date());
        
        var state_prefix = 'rally.techservices.' + this.getAppId();
        
        date_container.add({
            xtype:'rallydatefield',
            itemId:'from_date_selector',
            fieldLabel: 'From Week',
            value: default_week,
            stateful: true,
            stateId: state_prefix + ".from_date",
            stateEvents: ['change'],
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    if ( Ext.isEmpty(new_value) ) {
                        return;
                    }
                    var week_start = this._getBeginningOfWeek(new_value);
                    if ( week_start !== new_value ) {
                        dp.setValue(week_start);
                    }
                    if ( new_value.getDay() === 0 ) {
                        //this._updateData();
                    }
                }
            }
        });
        
        date_container.add({
            xtype:'rallydatefield',
            itemId:'to_date_selector',
            fieldLabel: 'Through Week',
            value: default_week,
            stateful: true,
            stateId: state_prefix + ".to_date",
            stateEvents: ['change'],
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    var week_start = this._getBeginningOfWeek(new_value);
                    if ( week_start !== new_value ) {
                        dp.setValue(week_start);
                    }
                    if ( new_value.getDay() === 0 ) {
                        //this._updateData();
                    }
                }
            }
        });
        
        var pi_container = container.add({
            xtype:'container',
            layout: 'vbox'
        });
        
        pi_container.add({
            xtype: 'rallybutton',
            text: 'Choose Portfolio Item',
            margin: '0px 5px 0px 5px',
            listeners: {
                scope: this,
                click: this._launchPIPicker
            }
        });
        
        pi_container.add({
            xtype:'container',
            itemId: 'pi_message',
            margin: 7,
            tpl: '<tpl>{FormattedID}: {Name}</tpl>'
        });
                
        var spacer = container.add({ xtype: 'container', flex: 1});
        container.add({
            xtype: 'rallybutton',
            text: 'Run',
            margin: '0px 5px 0px 5px',
            padding: 4,
            listeners: {
                scope: this,
                click: this._updateData
            }
        });
        
        container.add({
            xtype:'rallybutton',
            itemId:'export_button',
            cls: 'secondary',
            text: '<span class="icon-export"> </span>',
            disabled: true,
            listeners: {
                scope: this,
                click: function() {
                    this._export();
                }
            }
        });
        
        if ( this.isExternal() ) {
            container.add({type:'container', html: '&nbsp;&nbsp;&nbsp;&nbsp;'});
        }
    },
    
    _launchPIPicker: function() {
        var me = this;
        this._selectedPIData = null;
        
        Ext.create('Rally.technicalservices.ChooserDialog', {
            artifactTypes: this.PortfolioItemNames,
            autoShow: true,
            multiple: false,
            title: 'Choose PortfolioItem',
            filterableFields: [
                {
                    displayName: 'Formatted ID',
                    attributeName: 'FormattedID'
                },
                {
                    displayName: 'Name',
                    attributeName: 'Name'
                },
                {
                    displayName:'Project',
                    attributeName: 'Project.Name'
                },
                {
                    displayName:'Owner',
                    attributeName: 'Owner'
                }
            ],
            columns: [
                {
                    text: 'ID',
                    dataIndex: 'FormattedID'
                },
                'Name',
                'Project',
                'Owner',
                'State'
            ],
            fetchFields: ['ObjectID','FormattedID','Name'],
            listeners: {
                artifactchosen: function(dialog, selectedRecord){
                    this._selectedPIData = selectedRecord.getData();
                    this.down('#pi_message').update(this._selectedPIData);
                },
                scope: this
            }
         });
             
    },
    
    _updateData: function() {
        this.down('#display_box').removeAll();
        
        this.fireEvent('updateData', this, this._selectedPIData);
        
        Deft.Chain.pipeline([
            this._loadTime,
            this._loadHierarchyTree,
            this._filterForPI
        ],this).then({
            scope: this,
            success: function(time_values) {
                this.setLoading(false);
                
                var rows = this._getRowsFromTime(time_values);
                this._addGrid(this.down('#display_box'), rows);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading users with timesheets', msg);
            }
        });
    },
    
    _loadTime: function() {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        this.setLoading("Loading timesheets...");
        
        var tev_filters = [{property:'ObjectID', operator: '>', value: 0 }];
        
        if (this.down('#from_date_selector') ) {
            var start_date = Rally.util.DateTime.toIsoString( this.down('#from_date_selector').getValue(),false).replace(/T.*$/,'T00:00:00.000Z');
            tev_filters.push({property:'TimeEntryItem.WeekStartDate', operator: '>=', value:start_date});
        }
        
        if (this.down('#to_date_selector') ) {
            var start_date = Rally.util.DateTime.toIsoString( this.down('#to_date_selector').getValue(),true).replace(/T.*$/,'T00:00:00.000Z');
            tev_filters.push({property:'TimeEntryItem.WeekStartDate', operator: '<=', value:start_date});
        }
        
        var tev_config = {
            model:'TimeEntryValue',
            limit: 1,
            pageSize: 1,
            filters: tev_filters,
            fetch: ['WeekStartDate','ObjectID','DateVal','Hours',
                'TimeEntryItem','WorkProduct', 'WorkProductDisplayString',
                'Project','Feature','Task','TaskDisplayString',
                'User','UserName', 'CostCenter', 'FormattedID', 'Name', 
                this.getSetting('vendorField')
            ]
        };
        
        var config_clone = Ext.clone(tev_config);
        
        Ext.create('Rally.data.wsapi.Store', tev_config).load({
            callback : function(records, operation, successful) {
                if (successful){
                    var page_size = 200;
                    
                    var total = operation.resultSet.totalRecords;
                    var page_count = Math.ceil(total / page_size);
                    
                    var promises = [];
                    
                    Ext.Array.each(_.range(1, page_count+1), function(page_index) {
                        var config = Ext.clone(config_clone);
                        
                        config.pageSize = page_size;
                        config.limit = page_size;
                        config.currentPage = page_index;
                        
                        promises.push(function() { return me._loadWsapiRecords(config); });
                    });
                    
                    Deft.Chain.parallel(promises,this).then({
                        success: function(results) { 
                            deferred.resolve(Ext.Array.flatten(results));
                        },
                        failure: function(msg) { 
                            deferred.reject(msg);
                        }
                    });
                    
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });

        return deferred.promise;
    },
    
    _loadHierarchyTree: function(time_values) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        this.setLoading("Loading associated items...");

        
        var oids = Ext.Array.map(time_values, function(time_value){
            var tei = time_value.get('TimeEntryItem');
            var workproduct = tei.WorkProduct;
            if ( !Ext.isEmpty(workproduct) ) {
                return workproduct.ObjectID;
            }
            return -1;
        });
        
        var unique_oids = Ext.Array.unique(oids);

        var config = {
            fetch: ['_ItemHierarchy'],
            filters: [
                { property: '__At', value:'current'},
                { property: '_TypeHierarchy', value: 'HierarchicalRequirement'},
                { property: 'ObjectID', operator:  'in', value: unique_oids }
            ]
        };
        
        this._loadLookbackRecords(config).then({
            scope: this,
            success: function(lookback_records) {
                var parent_oids = Ext.Array.flatten(
                    Ext.Array.map(lookback_records, function(record) {
                        return Ext.Array.map(record.get('_ItemHierarchy'), function(item) {
                            return item;
                        });
                    })
                );
                
                this._loadParentsFromOIDs(Ext.Array.unique(parent_oids)).then({
                    scope: this,
                    success: function(parents) {
                        var time = this._addParentsToTime(time_values, lookback_records, parents);
                        deferred.resolve(time);
                    },
                    failure: function(msg) {
                        deferred.reject(msg);
                    }
                });
            },
            failure: function(msg) { deferred.reject(msg); }
        });
        
        return deferred.promise;
    },
    
    _filterForPI: function(time_values) {
        var selected_pi = this._selectedPIData;
        this.setLoading("Applying filters...");

        
        if ( Ext.isEmpty(selected_pi) ) { 
            return time_values;
        }
        //_TypeHierarchy
        var filtered_time_values = Ext.Array.filter(time_values, function(time_value) { 
            var type_hierarchy = time_value.get('_TypeHierarchy');
            return Ext.Array.contains(type_hierarchy, parseInt(selected_pi.ObjectID));
        });
        
        return filtered_time_values;
    },
    
    _loadParentsFromOIDs: function(parent_oids) {
        var me = this;
        var deferred = Ext.create('Deft.Deferred');

        var filters = Ext.Array.map(parent_oids, function(oid){
            return { property:'ObjectID', value:oid }
        });
        
        var models = Ext.Array.merge(['HierarchicalRequirement'], this.PortfolioItemNames);
        
        var chunk_size = 25;
        var array_of_chunked_filters = [];
        
        while (filters.length > 0 ) {
            array_of_chunked_filters.push(filters.splice(0,chunk_size));
        }
        
        var promises = [];
        Ext.Array.each(array_of_chunked_filters, function(filters){
            var config = { 
                models:models, 
                filters: Rally.data.wsapi.Filter.or(filters), 
                fetch: ['FormattedID','Name']
            };
            promises.push(function() { return this._loadWsapiArtifacts(config); });
        });
        Deft.Chain.sequence(promises,this).then({
            success: function(results) {
                deferred.resolve(Ext.Array.flatten(results));
            },
            failure: function(msg) {
                deferrred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _addParentsToTime: function(time_values, lookback_records, parents){
        
        var parents_by_parent_oid = {};
        Ext.Array.each(parents, function(parent){
            parents_by_parent_oid[parent.get('ObjectID')] = parent;
        });
        
        var parents_by_oid = {};
        var type_hierarchy_by_oid = {};
        
        Ext.Array.each(lookback_records, function(record) {
            var oid_list = record.get('_ItemHierarchy');
            var oid = oid_list[oid_list.length-1];
            
            type_hierarchy_by_oid[oid] = oid_list;
            
            // find topmost parent in scope
            Ext.Array.each( oid_list, function(parent_oid) {
                if ( parents_by_parent_oid[parent_oid] ) {
                    parents_by_oid[oid] = parents_by_parent_oid[parent_oid];
                }
            },this,true);
        },this);
                
        Ext.Array.each(time_values, function(time_value){
            var tei = time_value.get('TimeEntryItem');
            var wp = tei.WorkProduct;
            if ( !Ext.isEmpty(wp) ) {
                var oid = wp.ObjectID;
                time_value.set('_TopLevelParent', parents_by_oid[oid]);
                time_value.set('_TypeHierarchy', type_hierarchy_by_oid[oid] || []);
            } else {
                time_value.set('_TopLevelParent', "");
                time_value.set('_TypeHierarchy', []);
            }
        });
        
        return time_values;
        
    },
    
    _getRowsFromTime: function(time_values) {
        var me = this;
        return Ext.Array.map( time_values, function(time_value){
            var user = time_value.get('TimeEntryItem').User;
            var user_story = time_value.get('TimeEntryItem').WorkProduct;
            var feature = null;
            
            if ( user_story ) {
                feature = user_story.Feature;
            }
            return Ext.create('TSTimesheetFinanceRow',
                Ext.merge({
                    '_User': user,
                    '_WeekStartString': time_value.get('TimeEntryItem').WeekStartDate.replace(/T.*$/,''),
                    '_TopLevelParent': time_value.get('_TopLevelParent'),
                    '_CostCenter': user['CostCenter'],
                    '_Vendor': user[me.getSetting('vendorField')],
                    '_WorkProduct': user_story,
                    '_Feature': feature
                },
                time_value.getData())
            );
        });
    },
    
    _addGrid: function(container, rows) {
        this.logger.log('_addGrid', rows);
        var store = Ext.create('Rally.data.custom.Store',{ 
            data: rows, 
            model: 'TSTimesheetFinanceRow',
            pageSize: 10000
        });
                
        container.add({
            xtype:'rallygrid',
            store: store,
            columnCfgs: this._getColumns(),
            enableEditing: false,
            showRowActionsColumn: false,
            enableBulkEdit: false,
            showPagingToolbar: false
        });
        
        this.down('#export_button').setDisabled(false);
    },
    
    _getColumnShowSetting: function(column_name) {
        var column_settings = this.getSetting('columns');
        if ( Ext.isString(column_settings) ) {
            column_settings = Ext.JSON.decode(column_settings);
        }
        
        
        return column_settings && column_settings[column_name] && column_settings[column_name]['show'];
    },
    
    _getColumns: function() {
        var me = this;
                
        return [
            { 
                dataIndex: '_TopLevelParent', 
                text: 'Top Level Work Item', 
                hidden: !this._getColumnShowSetting('Top Level Work Item'),
                renderer: function(value) { 
                    if ( Ext.isEmpty(value) ) { return '' }
                    return value.get('FormattedID');
                }
            },
            { 
                dataIndex: '_Feature', 
                text: 'Feature', 
                hidden: !this._getColumnShowSetting('Feature'),
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) {
                        return "";
                    }
                    return v.FormattedID;
                }
            },
            { 
                dataIndex: '_WorkProduct', 
                text: 'Story ID', 
                hidden: !this._getColumnShowSetting('Story ID'),
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) {
                        return "";
                    }
                    return v.FormattedID;
                } 
            },
            { 
                dataIndex: '_WorkProduct', 
                text: 'Story Name', 
                hidden: !this._getColumnShowSetting('Story Name'),
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) {
                        return "";
                    }
                    return v.Name;
                }
            },
            { 
                dataIndex: '_WorkProduct', 
                text: 'Project', 
                hidden: !this._getColumnShowSetting('Project'),
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) {
                        return "";
                    }
                    return v.Project._refObjectName;
                }
            },
            { 
                dataIndex: '_User', 
                text: 'User', 
                hidden: !this._getColumnShowSetting('User'),
                renderer: function(value) { 
                    return value.UserName; 
                }
            },
            { 
                dataIndex: '_CostCenter', 
                text:'Cost Center',
                hidden: !this._getColumnShowSetting('Cost Center')
            },
            { 
                dataIndex: '_Vendor', 
                text:'Vendor',
                hidden: !this._getColumnShowSetting('Vendor')
            },
            { 
                dataIndex: '_WeekStartString', 
                text: 'Week Start',
                hidden: !this._getColumnShowSetting('Week Start')
            },
            { 
                dataIndex: 'DateVal', 
                text: 'Date', 
                hidden: !this._getColumnShowSetting('Date'),
                renderer: function(value) { 
                    return me._getUTCDate(value); 
                }
            },
            { 
                dataIndex: 'Hours', 
                text: 'Hours',
                hidden: !this._getColumnShowSetting('Hours')
            }
        ];
    },
    
    _export: function(){
        var grid = this.down('rallygrid');
        var me = this;
        
        if ( !grid ) { return; }
        
        var filename = Ext.String.format('timesheet-report.csv');

        this.setLoading("Generating CSV");
        Deft.Chain.sequence([
            function() { return Rally.technicalservices.FileUtilities.getCSVFromGrid(this,grid) } 
        ]).then({
            scope: this,
            success: function(csv){
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    },
    
    _getUTCDate: function(value) {
        return Rally.util.DateTime.toIsoString(value,true).replace(/T.*$/,'');
    },
    
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _loadWsapiArtifacts: function(config) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            fetch: ['ObjectID']
        };
        this.logger.log("Starting load:",config);
        Ext.create('Rally.data.wsapi.artifact.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    var message = "";
                    if ( operation.error.errors ) {
                        message = operation.error.errors.join('. ');
                    }
                    deferred.reject(message);
                }
            }
        });
        return deferred.promise;
    },
    
    _loadLookbackRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            removeUnauthorizedSnapshots: true,
            useHttpPost: true
        };
        this.logger.log("Starting load:",config);
        Ext.create('Rally.data.lookback.SnapshotStore', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    var message = "Cannot load Lookback records";
                    if ( operation.error && operation.error.errors ) {
                        message = operation.error.errors.join('. ');
                    }
                    deferred.reject(message);
                }
            }
        });
        return deferred.promise;
    },
    
    _displayGrid: function(records){
        this.down('#display_box').add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: field_names
        });
    },
    
    _getPortfolioItemTypes: function() {
        var config = {
            model: 'TypeDefinition', 
            fetch: ["TypePath","Ordinal"],
            filters: [{property:'TypePath', operator:'contains', value:'PortfolioItem/'}],
            sorters: [{property:'Ordinal',direction:'ASC'}]
        };
        
        return this._loadWsapiRecords(config);
    },

    _filterOutExceptStrings: function(store) {
        var app = Rally.getApp();
        
        store.filter([{
            filterFn:function(field){ 
                var attribute_definition = field.get('fieldDefinition').attributeDefinition;
                var attribute_type = null;
                if ( attribute_definition ) {
                    attribute_type = attribute_definition.AttributeType;
                }
                if (  attribute_type == "BOOLEAN" ) {
                    return false;
                }
                if ( attribute_type == "STRING" || attribute_type == "RATING") {
                    //if ( !field.get('fieldDefinition').attributeDefinition.Constrained ) {
                        return true;
                    //}
                }
                
                //console.log(attribute_definition.ElementName, attribute_definition,  attribute_type);
                return false;
            } 
        }]);
    },
    
    getSettingsFields: function() {
        var me = this;
        
        var columns = this._getColumns();
        
        return [{
            name: 'vendorField',
            xtype: 'rallyfieldcombobox',
            fieldLabel: 'User Vendor Field',
            labelWidth: 75,
            labelAlign: 'left',
            minWidth: 200,
            margin: 10,
            autoExpand: false,
            alwaysExpanded: false,
            model: 'User',
            listeners: {
                ready: function(field_box) {
                    me._filterOutExceptStrings(field_box.getStore());
                }
            },
            readyEvent: 'ready'
        },
            
        {
            name: 'columns',
            readyEvent: 'ready',
            fieldLabel: 'Columns',
            margin: '5px 0 0 12px',
            xtype: 'tscolumnsettingsfield',
            gridColumns: columns,
            listeners: {
                ready: function() {
                    this.fireEvent('columnsettingsready');
                }
            },
            bubbleEvents: 'columnsettingsready'
        }];
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _getBeginningOfWeek: function(js_date){
        this.logger.log("Get beginning from ", js_date);
        
        if ( Ext.isEmpty(js_date) ) { return null; }
        var start_of_week_here = Ext.Date.add(js_date, Ext.Date.DAY, -1 * js_date.getDay());
        return start_of_week_here;
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('TSTopLevelTimeReport', {
                   name: 'Technical Services Top Level Time Report'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>